/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package control;

import adt.ListInterface;
import entity.Course;
import entity.Programme;
import entity.Team;
import entity.TutorialGroup;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.TextStyle;
import java.util.InputMismatchException;
import java.util.Locale;
import java.util.Scanner;

/**
 *
 * @author OSCAR KOH YUNG QIN  
 */
public class TeamSummary2 {

    Scanner scanner = new Scanner(System.in);

    public void displayTeamsSummaryReport(ListInterface<Programme> programmeList) {
        //Select the programme to view 
        Programme selectedProgram = selectProgram(programmeList);

        //Request user to filter teams based on space 
        int teamSpace = getTeamSpace();

        displayTitle(selectedProgram);

        displayCurrentDateTime();

    }

    public void displayTitle(Programme program) {
        System.out.println("========================================================================");
        System.out.println("\tTUNKU ABDUL RAHMAN UNIVERSITY OF MANAGEMENT AND TECHNOLOGY");
        System.out.println("\tASSIGNMENT TEAM MANAGEMENT SUBSYSTEM");
        System.out.println("========================================================================\n");
        System.out.println("\t\tTEAMS SUMMARY REPORT FOR " + program.getProgrammeName() + "\n");

    }

    public void displaySummaryDetails(Programme selectedProgram) {
        int counter = 1;
        //list out all the groups of the program
        ListInterface<TutorialGroup> groupList = selectedProgram.getGroupLists();
        for (int i = 0; i < groupList.size(); i++) {
            System.out.println((i + 1) + ". " + groupList.get(i));
            //List out all the courses for this group (Groups in the same program will have the same course list)
            ListInterface<Course> courseList = selectedProgram.getCourseList();
            for (int j = 0; j < courseList.size(); j++) {
                System.out.println((j + 1) + ". " + courseList.get(j));
                //List out all the teams in that course of the selected group 
                ListInterface<Team> teamList = courseList.get(j).getTeamLists();
                for (int k = 0; k < teamList.size(); k++) {
                    //If the teams retrieved are belongs to the tutorial group 
                    if (teamList.get(k).getTutorialGroup().equals(groupList.get(i))) {
                        System.out.println(counter + ". " + teamList.get(k));
                        counter ++;
                    }
                }
            }

        }
    }

    public int getTeamSpace() {
        System.out.println("Minimum available space for teams: ");
        int teamSpace = scanner.nextInt();
        return teamSpace;

    }

    public Programme selectProgram(ListInterface<Programme> programmeList) {
        boolean validProgramSelection = false;
        Programme program = null;

        while (!validProgramSelection) {
            // List all programmes
            System.out.println(" ");
            for (int i = 0; i < programmeList.size(); i++) {
                System.out.println((i + 1) + ". " + programmeList.get(i).getProgrammeName());
            }

            // Select the programme
            int programPosition = -1;
            try {
                System.out.print("\nEnter the program number to create team: ");
                programPosition = scanner.nextInt();

                if (programPosition < 1 || programPosition > programmeList.size()) {
                    throw new IllegalArgumentException("\nInvalid program number. Please enter a number between 1 and " + programmeList.size() + ".");
                }

                // Retrieve the selected program
                program = programmeList.get(programPosition - 1);
                validProgramSelection = true;
            } catch (InputMismatchException e) {
                System.out.println("\nInvalid input. Please enter a valid number.");
                scanner.nextLine(); // Consume the invalid input
            } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
            }
        }

        return program;
    }

    private void displayCurrentDateTime() {
        LocalDateTime currentDateTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE, dd-MM-yyyy HH:mm:ss");
        String formattedDateTime = currentDateTime.format(formatter);

        // Get the day of the week in the default locale
        String dayOfWeek = currentDateTime.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.getDefault());

        System.out.println("Generated By: " + formattedDateTime + "\n");
    }

}
